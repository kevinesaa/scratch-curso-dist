WEBVTT

1
00:00:04.460 --> 00:00:09.425
Como ya mencionamos en el curso antes
de escribir el código, debemos 

2
00:00:09.425 --> 00:00:13.970
pensar primero sobre qué queremos que haga el
programa y cómo lo vamos a desarrollar.

3
00:00:13.970 --> 00:00:16.785
En términos de ingeniería de software,

4
00:00:16.785 --> 00:00:21.600
el diseño del programa va antes que
su desarrollo o implementación.

5
00:00:21.600 --> 00:00:26.162
El diseño de software incluye describir
todos los aspectos del programa que se

6
00:00:26.162 --> 00:00:30.620
construirá, como la interfaz con el
usuario y la funcionalidad que tendrá.

7
00:00:30.620 --> 00:00:35.291
La interfaz es el medio en el
cual el usuario interactúa con el

8
00:00:35.291 --> 00:00:38.140
programa y controla la aplicación.

9
00:00:38.140 --> 00:00:41.332
Las interfaces gráficas son muy populares,

10
00:00:41.332 --> 00:00:45.700
ya que hacen más sencillo y
agradable el uso de los programas.

11
00:00:45.700 --> 00:00:50.172
Cuando hagas tus programas es valioso
dedicarle tiempo al diseño de

12
00:00:50.172 --> 00:00:52.610
la interfaz pensando en el usuario.

13
00:00:52.610 --> 00:00:57.647
Esto incluye pensar sobre los principales
elementos de tu programa como objetos y

14
00:00:57.647 --> 00:01:02.114
disfraces, fondos y todos los otros
elementos que usemos, como botones o

15
00:01:02.114 --> 00:01:04.170
instrucciones para el usuario.

16
00:01:04.170 --> 00:01:10.200
Algunas preguntas a responder son:
¿cómo debería lucir este elemento?

17
00:01:10.200 --> 00:01:12.676
¿dónde debería estar ubicado?

18
00:01:12.676 --> 00:01:15.690
¿cuándo debe aparecer o desaparecer?

19
00:01:15.690 --> 00:01:20.090
También es importante pensar cómo
interactuará el usuario con el

20
00:01:20.090 --> 00:01:22.650
programa que estamos construyendo.

21
00:01:22.650 --> 00:01:28.280
Por ejemplo, ¿el usuario presionará
teclas, por ejemplo, para controlar un objeto?

22
00:01:28.280 --> 00:01:31.213
¿alcanza con la bandera verde?

23
00:01:31.213 --> 00:01:33.000
¿usará la cámara?

24
00:01:33.000 --> 00:01:36.928
¿y qué ocurrirá si no tiene cámara?

25
00:01:36.928 --> 00:01:40.965
Finalmente, debemos considerar
cuán sencillo le resultará a un

26
00:01:40.965 --> 00:01:43.410
usuario interactuar con nuestro programa.

27
00:01:43.410 --> 00:01:47.580
Por ejemplo,
¿está claro qué esperamos del usuario?

28
00:01:47.580 --> 00:01:52.020
¿puede el usuario fácilmente saber
cómo interactuar con el programa?

29
00:01:52.020 --> 00:01:56.410
Es una buena idea mantener
las interfaces simples.

30
00:01:56.410 --> 00:02:00.864
Esto hace que sea más fácil para
el usuario interactuar con el

31
00:02:00.864 --> 00:02:05.130
programa y siempre la podemos completar
o enriquecer más si es necesario.

32
00:02:05.130 --> 00:02:10.010
Otra recomendación es hacer dibujos
o bocetos de la interfaz en papel.

33
00:02:10.010 --> 00:02:14.643
Esto ayuda a visualizar las cosas
y descubrir posibles errores, y

34
00:02:14.643 --> 00:02:19.330
puede serte muy útil como referencia cuando
construyas efectivamente la interfaz.

35
00:02:19.330 --> 00:02:24.640
En forma similar, antes de escribir el
código, debemos diseñarlo en un papel.

36
00:02:24.640 --> 00:02:30.546
Esto incluye dividir el problema en
partes y anotar los algoritmos en texto,

37
00:02:30.546 --> 00:02:32.900
diagramas de flujo o seudocódigo.

38
00:02:32.900 --> 00:02:35.853
Descomponer el problema
en partes más pequeñas o

39
00:02:35.853 --> 00:02:39.958
fáciles de manejar es uno de los conceptos
más importantes en computación y

40
00:02:39.958 --> 00:02:42.790
es la clave para el desarrollo
exitoso del software.

41
00:02:42.790 --> 00:02:48.960
Se conoce también con el nombre de
descomposición o dividir para conquistar.

42
00:02:48.960 --> 00:02:54.035
La idea principal aquí es que
cuando queremos desarrollar un

43
00:02:54.035 --> 00:02:57.867
programa complejo lo podemos
dividir en subproblemas y

44
00:02:57.867 --> 00:03:03.095
a su vez, cada uno de ellos dividirlo
en partes y así sucesivamente hasta que

45
00:03:03.095 --> 00:03:07.330
las diversas partes se puedan
transformar fácilmente en un algoritmo.

46
00:03:07.330 --> 00:03:10.519
El diseño del código es
equivalente a los planos de un

47
00:03:10.519 --> 00:03:15.420
arquitecto para una casa como verás en
la entrevista al experto en esta unidad.

48
00:03:15.420 --> 00:03:19.570
El programa entero se captura en
el diseño y se divide en partes.

49
00:03:19.570 --> 00:03:24.518
De hecho cada una de esas partes puede
estar a cargo de ser desarrollada por un

50
00:03:24.518 --> 00:03:29.190
programador distinto y finalmente el
programa integrado debe funcionar igual.

51
00:03:29.190 --> 00:03:32.773
En el curso hemos trabajado
diferentes ejemplos de

52
00:03:32.773 --> 00:03:36.280
diseñar los programas
antes de implementarlos.

53
00:03:36.280 --> 00:03:39.360
Por ejemplo, en el del día
soleado o la película.

54
00:03:39.360 --> 00:03:42.548
Ahora es tiempo de
diseñar e implementar un

55
00:03:42.548 --> 00:03:45.580
juego interactivo donde
usaremos la cámara.